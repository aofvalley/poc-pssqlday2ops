name: PostgreSQL Backup and Restore - Simple

on:
  workflow_dispatch:  # For manual activation
  schedule:
    - cron: '0 2 * * *'  # Runs daily at 2 AM UTC

jobs:
  backup-restore:
    runs-on: ubuntu-latest
    
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
        
      - name: Install PostgreSQL client tools
        run: |
          sudo apt-get update
          sudo apt-get install -y wget
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          sudo apt-get update
          sudo apt-get install -y postgresql-client-17
          
      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Set environment variables
        run: |
          echo "PG_HOST_PROD=${{ secrets.PG_HOST_PROD }}" >> $GITHUB_ENV
          echo "PG_HOST_DEV=${{ secrets.PG_HOST_DEV }}" >> $GITHUB_ENV
          echo "PG_DATABASE=${{ secrets.PG_DATABASE }}" >> $GITHUB_ENV
          echo "PG_USER=${{ secrets.PG_USER }}" >> $GITHUB_ENV
          echo "PG_PASSWORD=${{ secrets.PG_PASSWORD }}" >> $GITHUB_ENV
          echo "AZURE_STORAGE_ACCOUNT=${{ secrets.AZURE_STORAGE_ACCOUNT }}" >> $GITHUB_ENV
          echo "AZURE_STORAGE_CONTAINER=${{ secrets.AZURE_STORAGE_CONTAINER }}" >> $GITHUB_ENV
          echo "PGPASSWORD=${{ secrets.PG_PASSWORD }}" >> $GITHUB_ENV
          echo "RESOURCE_GROUP=${{ secrets.RESOURCE_GROUP }}" >> $GITHUB_ENV
      
      - name: Get runner IP and configure firewall rules
        run: |
          # Get public IP of the GitHub runner
          PUBLIC_IP=$(curl -s https://api.ipify.org)
          echo "RUNNER_IP=$PUBLIC_IP" >> $GITHUB_ENV
          
          # Add firewall rules to PostgreSQL servers
          az postgres flexible-server firewall-rule create \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --name ${{ secrets.PG_HOST_PROD }} \
            --rule-name "github-action-runner" \
            --start-ip-address $PUBLIC_IP \
            --end-ip-address $PUBLIC_IP
          
          az postgres flexible-server firewall-rule create \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --name ${{ secrets.PG_HOST_DEV }} \
            --rule-name "github-action-runner" \
            --start-ip-address $PUBLIC_IP \
            --end-ip-address $PUBLIC_IP
          
          # Wait for firewall rules to propagate
          sleep 30
      
      - name: Create backup
        run: |
          chmod +x ./scripts/backup.sh
          ./scripts/backup.sh
        
      - name: Restore from backup
        run: |
          chmod +x ./scripts/restore.sh
          ./scripts/restore.sh
          
      - name: Clean up firewall rules
        if: always()  # This ensures the step runs even if previous steps fail
        run: |
          az postgres flexible-server firewall-rule delete \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --name ${{ secrets.PG_HOST_PROD }} \
            --rule-name "github-action-runner" \
            --yes
            
          az postgres flexible-server firewall-rule delete \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --name ${{ secrets.PG_HOST_DEV }} \
            --rule-name "github-action-runner" \
            --yes